worker_processes  1;
daemon on;
master_process off;
error_log /root/lua-resty-hyperscan/t/servroot/logs/error.log debug;
pid       /root/lua-resty-hyperscan/t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
#env LUA_PATH;
#env LUA_CPATH;



http {
    access_log /root/lua-resty-hyperscan/t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;

init_by_lua_block {
    local hs = require('hyperscan')
    local ret, err = hs.init(hs.HS_WORK_RUNTIME)
    if not ret then
        ngx.log(ngx.ERR, "hyperscan init failed, ", err)
    end

    local obj = hs.new(hs.HS_MODE_BLOCK)


    -- load database
    ret, err = obj:compile("test/make_serialize_database/serialized.db")
    if not ret then
        ngx.log(ngx.ERR, "hyperscan load database failed, ", err)
        return
    end

    hs.set("test2_obj", obj)
}


    server {
        listen          1984;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
location = /t {
    content_by_lua_block {
        local hs = require('hyperscan')
        local obj = hs.get("test2_obj")
        local ret, id = obj:scan("abcdefghisghk")
        if ret then
            return ngx.print("matchid:", id)
        else
            ngx.print("not match")
        end
    }
}

        # End test case config.

        location / {
            root /root/lua-resty-hyperscan/t/servroot/html;
            index index.html index.htm;
        }
    }
}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
env ASAN_OPTIONS;
env MOCKNOEAGAIN_VERBOSE;
env MOCKNOEAGAIN;
user root;
